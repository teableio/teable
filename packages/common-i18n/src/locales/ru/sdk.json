{
  "common": {
    "comingSoon": "Скоро будет",
    "empty": "Пусто",
    "noRecords": "Нет доступных записей",
    "unnamedRecord": "Безымянная запись",
    "untitled": "Без названия",
    "cancel": "Отмена",
    "confirm": "Подтвердить",
    "back": "Назад",
    "done": "Готово",
    "create": "Создать",
    "search": {
      "placeholder": "Поиск...",
      "empty": "Результаты не найдены"
    },
    "selectPlaceHolder": "Выберите...",
    "loading": "Загрузка...",
    "loadMore": "Загрузить больше",
    "uploadFailed": "Загрузка не удалась",
    "rowCount": "{{count}} записей",
    "summary": "Итог",
    "summaryTip": "Наведите, чтобы выбрать сводку",
    "actions": "Действия"
  },
  "undoRedo": {
    "undo": "Отменить",
    "redo": "Повторить",
    "undoFailed": "Отмена не удалась",
    "redoFailed": "Повтор не удался",
    "nothingToUndo": "Нечего отменять",
    "nothingToRedo": "Нечего повторять",
    "undoSucceed": "Отмена выполнена",
    "redoSucceed": "Повтор выполнен",
    "undoing": "Отменяем...",
    "redoing": "Повторяем..."
  },
  "editor": {
    "attachment": {
      "uploadDragOver": "Отпустите, чтобы загрузить файл",
      "uploadDragDefault": "Вставьте или перетащите файл для загрузки сюда"
    },
    "date": {
      "placeholder": "Выберите дату",
      "today": "Сегодня"
    },
    "formula": {
      "title": "Редактор формул",
      "guideSyntax": "Синтаксис",
      "guideExample": "Пример",
      "helperExample": "Пример: ",
      "fieldValue": "Возвращает значение для поля {{fieldName}}."
    },
    "link": {
      "placeholder": "Выберите записи для ссылки",
      "searchPlaceholder": "Поиск записей",
      "create": "Добавить запись",
      "selectRecord": "Выбрать запись",
      "unselected": "Не выбрано",
      "selected": "Выбрано",
      "expandRecordError": "Нет доступа для просмотра этой записи."
    },
    "user": {
      "searchPlaceholder": "Найдите пользователей по имени",
      "notify": "Уведомить пользователей, когда они будут выбраны"
    },
    "select": {
      "addOption": "Добавить вариант '{{option}}'"
    }
  },
  "filter": {
    "label": "Фильтр",
    "displayLabel": "Фильтр по ",
    "displayLabel_other": "Фильтр по {{fieldName}} и {{count}} другим полям",
    "addCondition": "Добавить условие",
    "addConditionGroup": "Добавить группу условий",
    "nestedLimitTip": "Условия фильтра могут быть вложены не более чем на {{depth}} уровней",
    "linkInputPlaceholder": "Введите значение",
    "groupDescription": "Любое из следующих условий верно…",
    "currentUser": "Я (текущий пользователь)",
    "tips": {
      "scope": "В этом виде показывать записи"
    },
    "invalidateSelected": "Неверное значение",
    "invalidateSelectedTips": "Выбранное значение было удалено, выберите другое",
    "default": {
      "empty": "Фильтры не применены",
      "placeholder": "Введите значение"
    },
    "conjunction": {
      "and": "и",
      "or": "или",
      "where": "где"
    },
    "operator": {
      "is": "является",
      "isNot": "не является",
      "contains": "содержит",
      "doesNotContain": "не содержит",
      "isEmpty": "пусто",
      "isNotEmpty": "не пусто",
      "isGreater": "больше чем",
      "isGreaterEqual": "больше или равно",
      "isLess": "меньше чем",
      "isLessEqual": "меньше или равно",
      "isAnyOf": "является любым из",
      "isNoneOf": "не является ни одним из",
      "hasAnyOf": "имеет любой из",
      "hasAllOf": "имеет все из",
      "hasNoneOf": "не имеет ни одного из",
      "isExactly": "точно",
      "isWithIn": "в пределах",
      "isBefore": "до",
      "isAfter": "после",
      "isOnOrBefore": "на или до",
      "isOnOrAfter": "на или после",
      "number": {
        "is": "=",
        "isNot": "≠",
        "isGreater": ">",
        "isGreaterEqual": "≥",
        "isLess": "<",
        "isLessEqual": "≤"
      }
    },
    "component": {
      "date": {
        "today": "сегодня",
        "tomorrow": "завтра",
        "yesterday": "вчера",
        "oneWeekAgo": "неделю назад",
        "oneWeekFromNow": "через неделю",
        "oneMonthAgo": "месяц назад",
        "oneMonthFromNow": "через месяц",
        "daysAgo": "дней назад",
        "daysFromNow": "дней вперед",
        "exactDate": "точная дата",
        "pastWeek": "прошлая неделя",
        "pastMonth": "прошлый месяц",
        "pastYear": "прошлый год",
        "nextWeek": "следующая неделя",
        "nextMonth": "следующий месяц",
        "nextYear": "следующий год",
        "pastNumberOfDays": "прошлое количество дней",
        "nextNumberOfDays": "следующее количество дней"
      }
    }
  },
  "color": {
    "label": "Цвет"
  },
  "rowHeight": {
    "short": "низкий",
    "medium": "средний",
    "tall": "высокий",
    "extraTall": "очень высокий"
  },
  "share": {
    "title": "Поделиться"
  },
  "extensions": {
    "title": "Расширения"
  },
  "hidden": {
    "label": "Скрытые поля",
    "configLabel_one": "{{count}} скрытое поле",
    "configLabel_other": "{{count}} скрытых поля",
    "showAll": "Показать все",
    "hideAll": "Скрыть все",
    "primaryKey": "Основное поле: Идентифицирует записи\nнельзя скрыть или удалить, видно в связанных записях."
  },
  "expandRecord": {
    "copy": "Копировать в буфер обмена",
    "copyRecordUrl": "Копировать URL записи",
    "deleteRecord": "Удалить запись",
    "recordHistory": {
      "hiddenRecordHistory": "Скрыть историю записи",
      "showRecordHistory": "Показать историю записи",
      "createdTime": "Время создания",
      "createdBy": "Создано",
      "before": "До",
      "after": "После",
      "viewRecord": "Просмотреть запись"
    }
  },
  "sort": {
    "label": "Сортировка",
    "displayLabel_one": "Сортировать по {{count}} полю",
    "displayLabel_other": "Сортировать по {{count}} полям",
    "setTips": "Сортировать по",
    "addButton": "Добавить ещё одну сортировку",
    "autoSort": "Автоматически сортировать записи",
    "selectASCLabel": "от первого к последнему",
    "selectDESCLabel": "от последнего к первому"
  },
  "group": {
    "label": "Группировка",
    "displayLabel_one": "Группировать по {{count}} полю",
    "displayLabel_other": "Группировать по {{count}} полям",
    "setTips": "Группировать по",
    "addButton": "Добавить подгруппу"
  },
  "field": {
    "title": {
      "singleLineText": "Текст в одну строку",
      "longText": "Длинный текст",
      "singleSelect": "Одиночный выбор",
      "number": "Число",
      "multipleSelect": "Множественный выбор",
      "link": "Ссылка на другую запись",
      "formula": "Формула",
      "date": "Дата",
      "createdTime": "Время создания",
      "lastModifiedTime": "Время последнего изменения",
      "attachment": "Вложение",
      "checkbox": "Флажок",
      "rollup": "Сворачивание",
      "user": "Пользователь",
      "rating": "Рейтинг",
      "autoNumber": "Автонумерация",
      "lookup": "Поиск",
      "button": "Кнопка",
      "createdBy": "Создано",
      "lastModifiedBy": "Изменено"
    }
  },
  "permission": {
    "actionDescription": {
      "spaceCreate": "Создать пространство",
      "spaceDelete": "Удалить пространство",
      "spaceRead": "Читать пространство",
      "spaceUpdate": "Обновить пространство",
      "spaceInviteEmail": "Пригласить по электронной почте в пространство",
      "spaceInviteLink": "Пригласить по ссылке в пространство",
      "spaceGrantRole": "Назначить роль в пространстве",
      "baseCreate": "Создать базу",
      "baseDelete": "Удалить базу",
      "baseRead": "Читать базу",
      "baseUpdate": "Обновить базу",
      "baseInviteEmail": "Пригласить по электронной почте в базу",
      "baseInviteLink": "Пригласить по ссылке в базу",
      "baseTableImport": "Импортировать данные в базу",
      "baseTableExport": "Экспортировать данные из базы",
      "baseAuthorityMatrixConfig": "Настроить матрицу полномочий",
      "baseDbConnect": "Подключение к базе данных",
      "tableCreate": "Создать таблицу",
      "tableRead": "Читать таблицу",
      "tableDelete": "Удалить таблицу",
      "tableUpdate": "Обновить таблицу",
      "tableImport": "Импортировать данные в таблицу",
      "tableExport": "Экспортировать данные из таблицы",
      "viewCreate": "Создать вид",
      "viewDelete": "Удалить вид",
      "viewRead": "Читать вид",
      "viewUpdate": "Обновить вид",
      "fieldCreate": "Создать поле",
      "fieldDelete": "Удалить поле",
      "fieldRead": "Читать поле",
      "fieldUpdate": "Обновить поле",
      "recordCreate": "Создать запись",
      "recordComment": "Комментировать запись",
      "recordDelete": "Удалить запись",
      "recordRead": "Читать запись",
      "recordUpdate": "Обновить запись",
      "automationCreate": "Создать автоматизацию",
      "automationDelete": "Удалить автоматизацию",
      "automationRead": "Читать автоматизацию",
      "automationUpdate": "Обновить автоматизацию",
      "userEmailRead": "Читать электронную почту пользователя",
      "recordHistoryRead": "Читать историю записей",
      "baseQuery": "Запрос базы"
    }
  },
  "noun": {
    "table": "Таблица",
    "view": "Вид",
    "space": "Пространство",
    "base": "База",
    "field": "Поле",
    "record": "Запись",
    "automation": "Автоматизация",
    "user": "Пользователь",
    "recordHistory": "История записи",
    "you": "Вы"
  },
  "formula": {
    "SUM": {
      "summary": "Складывает числа. Эквивалентно number1 + number2 + ...",
      "example": "SUM(100, 200, 300) => 600"
    },
    "AVERAGE": {
      "summary": "Возвращает среднее значение чисел.",
      "example": "AVERAGE(100, 200, 300) => 200"
    },
    "MAX": {
      "summary": "Возвращает наибольшее из данных чисел.",
      "example": "MAX(100, 200, 300) => 300"
    },
    "MIN": {
      "summary": "Возвращает наименьшее из данных чисел.",
      "example": "MIN(100, 200, 300) => 100"
    },
    "ROUND": {
      "summary": "Округляет значение до указанного количества знаков после запятой (округляет к ближайшему целому числу при указанной точности, с округлением половины в сторону положительной бесконечности).",
      "example": "ROUND(1.99, 0) => 2\nROUND(16.8, -1) => 20"
    },
    "ROUNDUP": {
      "summary": "Округляет значение до указанного количества знаков, всегда в большую сторону, т.е. от нуля.",
      "example": "ROUNDUP(1.1, 0) => 2\nROUNDUP(-1.1, 0) => -2"
    },
    "ROUNDDOWN": {
      "summary": "Округляет значение до указанного количества знаков, всегда в меньшую сторону, т.е. к нулю.",
      "example": "ROUNDDOWN(1.9, 0) => 1\nROUNDDOWN(-1.9, 0) => -1"
    },
    "CEILING": {
      "summary": "Возвращает ближайшее кратное указанной значимости, большее или равное числу.",
      "example": "CEILING(2.49) => 3\nCEILING(2.49, 1) => 2.5\nCEILING(2.49, -1) => 10"
    },
    "FLOOR": {
      "summary": "Возвращает ближайшее кратное значимости, меньшее или равное числу.",
      "example": "FLOOR(2.49) => 2\nFLOOR(2.49, 1) => 2.4\nFLOOR(2.49, -1) => 0"
    },
    "EVEN": {
      "summary": "Возвращает наименьшее четное число, большее или равное указанному значению.",
      "example": "EVEN(0.1) => 2\nEVEN(-0.1) => -2"
    },
    "ODD": {
      "summary": "Округляет положительное значение к ближайшему нечетному числу, а отрицательное — к ближайшему нечетному числу в меньшую сторону.",
      "example": "ODD(0.1) => 1\nODD(-0.1) => -1"
    },
    "INT": {
      "summary": "Возвращает целое значение числа.",
      "example": "INT(1.9) => 1\nINT(-1.9) => -2"
    },
    "ABS": {
      "summary": "Возвращает абсолютное значение.",
      "example": "ABS(-1) => 1"
    },
    "SQRT": {
      "summary": "Возвращает квадратный корень из неотрицательного числа.",
      "example": "SQRT(4) => 2"
    },
    "POWER": {
      "summary": "Вычисляет значение основания, возведенного в степень.",
      "example": "POWER(2) => 4"
    },
    "EXP": {
      "summary": "Вычисляет экспоненту числа (e), возведенного в степень.",
      "example": "EXP(0) => 1\nEXP(1) => 2.718"
    },
    "LOG": {
      "summary": "Вычисляет логарифм числа по указанному основанию. По умолчанию основание — 10.",
      "example": "LOG(100) => 2\nLOG(1024, 2) => 10"
    },
    "MOD": {
      "summary": "Возвращает остаток от деления первого числа на второе.",
      "example": "MOD(9, 2) => 1\nMOD(9, 3) => 0"
    },
    "VALUE": {
      "summary": "Преобразует текстовую строку в число.",
      "example": "VALUE(\"$1,000,000\") => 1000000"
    },
    "CONCATENATE": {
      "summary": "Объединяет различные типы аргументов в одну текстовую строку.",
      "example": "CONCATENATE(\"Hello \", \"Teable\") => Hello Teable"
    },
    "FIND": {
      "summary": "Находит вхождение строки stringToFind в строке whereToSearch, начиная с опциональной позиции startFromPosition. Если вхождение не найдено, результат будет 0.",
      "example": "FIND(\"Teable\", \"Hello Teable\") => 7\nFIND(\"Teable\", \"Hello Teable\", 5) => 7\nFIND(\"Teable\", \"Hello Teable\", 10) => 0"
    },
    "SEARCH": {
      "summary": "Ищет вхождение строки stringToFind в строке whereToSearch, начиная с опциональной позиции startFromPosition. Если вхождение не найдено, результат будет пустым.",
      "example": "SEARCH(\"Teable\", \"Hello Teable\") => 7\nSEARCH(\"Teable\", \"Hello Teable\", 5) => 7\nSEARCH(\"Teable\", \"Hello Teable\", 10) => \"\""
    },
    "MID": {
      "summary": "Извлекает подстроку длиной count символов, начиная с позиции whereToStart.",
      "example": "MID(\"Hello Teable\", 6, 6) => \"Teable\""
    },
    "LEFT": {
      "summary": "Извлекает howMany символов с начала строки.",
      "example": "LEFT(\"2023-09-06\", 4) => \"2023\""
    },
    "RIGHT": {
      "summary": "Извлекает howMany символов с конца строки.",
      "example": "RIGHT(\"2023-09-06\", 5) => \"09-06\""
    },
    "REPLACE": {
      "summary": "Заменяет количество символов, начиная с указанной позиции, на текст замены.",
      "example": "REPLACE(\"Hello Table\", 7, 5, \"Teable\") => \"Hello Teable\""
    },
    "REGEXP_REPLACE": {
      "summary": "Заменяет все подстроки, совпадающие с регулярным выражением, на текст замены.",
      "example": "REGEXP_REPLACE(\"Hello Table\", \"H.* \", \"\") => \"Teable\""
    },
    "SUBSTITUTE": {
      "summary": "Заменяет вхождения old_text на new_text. Можно указать индекс для замены конкретного вхождения old_text.",
      "example": "SUBSTITUTE(\"Hello Table\", \"Table\", \"Teable\") => \"Hello Teable\""
    },
    "LOWER": {
      "summary": "Преобразует строку в нижний регистр.",
      "example": "LOWER(\"Hello Teable\") => \"hello teable\""
    },
    "UPPER": {
      "summary": "Преобразует строку в верхний регистр.",
      "example": "UPPER(\"Hello Teable\") => \"HELLO TEABLE\""
    },
    "REPT": {
      "summary": "Повторяет строку указанное количество раз.",
      "example": "REPT(\"Hello!\") => \"Hello!Hello!Hello!\""
    },
    "TRIM": {
      "summary": "Удаляет пробелы в начале и в конце строки.",
      "example": "TRIM(\" Hello \") => \"Hello\""
    },
    "LEN": {
      "summary": "Возвращает длину строки.",
      "example": "LEN(\"Hello\") => 5"
    },
    "T": {
      "summary": "Возвращает аргумент, если это текст, и пусто, если нет.",
      "example": "T(\"Hello\") => \"Hello\"\nT(100) => null"
    },
    "ENCODE_URL_COMPONENT": {
      "summary": "Кодирует определенные символы для использования в URL или URI. Не кодирует следующие символы: - _ . ~",
      "example": "ENCODE_URL_COMPONENT(\"Hello Teable\") => \"Hello%20Teable\""
    },
    "IF": {
      "summary": "Возвращает value1, если логическое условие истинно, иначе возвращает value2. Также может использоваться для составления вложенных условий IF.",
      "example": "IF(2 > 1, \"A\", \"B\") => \"A\"\nIF(2 > 1, TRUE, FALSE) => TRUE"
    },
    "SWITCH": {
      "summary": "Принимает выражение и список возможных значений, для которых это выражение будет принимать указанные значения. Можно указать значение по умолчанию, если выражение не соответствует ни одному из заданных вариантов.",
      "example": "SWITCH(\"B\", \"A\", \"Значение A\", \"B\", \"Значение B\", \"Значение по умолчанию\") => \"Значение B\""
    },
    "AND": {
      "summary": "Возвращает true, если все аргументы истинны, в противном случае возвращает false.",
      "example": "AND(1 < 2, 5 > 3) => true\nAND(1 < 2, 5 < 3) => false"
    },
    "OR": {
      "summary": "Возвращает true, если хотя бы один из аргументов истинный.",
      "example": "OR(1 < 2, 5 < 3) => true\nOR(1 > 2, 5 < 3) => false"
    },
    "XOR": {
      "summary": "Возвращает true, если нечетное количество аргументов истинны.",
      "example": "XOR(1 < 2, 5 < 3, 8 < 10) => false\nXOR(1 > 2, 5 < 3, 8 < 10) => true"
    },
    "NOT": {
      "summary": "Инвертирует логическое значение аргумента.",
      "example": "NOT(1 < 2) => false\nNOT(1 > 2) => true"
    },
    "BLANK": {
      "summary": "Возвращает пустое значение.",
      "example": "BLANK() => null\nIF(2 > 3, \"Yes\", BLANK()) => null"
    },
    "ERROR": {
      "summary": "Возвращает значение ошибки.",
      "example": "IF(2 > 3, \"Yes\", ERROR(\"Calculation\")) => \"#ОШИБКА: Calculation\""
    },
    "IS_ERROR": {
      "summary": "Возвращает true, если выражение вызывает ошибку.",
      "example": "IS_ERROR(ERROR()) => true"
    },
    "TODAY": {
      "summary": "Возвращает текущую дату.",
      "example": "TODAY() => \"2023-09-08 00:00\""
    },
    "NOW": {
      "summary": "Возвращает текущие дату и время.",
      "example": "NOW() => \"2023-09-08 16:50\""
    },
    "YEAR": {
      "summary": "Возвращает год в виде четырехзначного числа.",
      "example": "YEAR(\"2023-09-08\") => 2023"
    },
    "MONTH": {
      "summary": "Возвращает месяц в виде числа от 1 (январь) до 12 (декабрь).",
      "example": "MONTH(\"2023-09-08\") => 9"
    },
    "WEEKNUM": {
      "summary": "Возвращает номер недели в году.",
      "example": "WEEKNUM(\"2023-09-08\") => 36"
    },
    "WEEKDAY": {
      "summary": "Возвращает день недели в виде числа от 0 до 6 включительно. Можно указать, с какого дня начинать неделю: «Воскресенье» или «Понедельник». По умолчанию неделя начинается с воскресенья.",
      "example": "WEEKNUM(\"2023-09-08\") => 5"
    },
    "DAY": {
      "summary": "Возвращает день месяца в виде числа от 1 до 31.",
      "example": "DAY(\"2023-09-08\") => 8"
    },
    "HOUR": {
      "summary": "Возвращает час времени в виде числа от 0 (00:00) до 23 (23:00).",
      "example": "HOUR(\"2023-09-08 16:50\") => 16"
    },
    "MINUTE": {
      "summary": "Возвращает минуту времени в виде числа от 0 до 59.",
      "example": "MINUTE(\"2023-09-08 16:50\") => 50"
    },
    "SECOND": {
      "summary": "Возвращает секунду времени в виде числа от 0 до 59.",
      "example": "SECOND(\"2023-09-08 16:50:30\") => 30"
    },
    "FROMNOW": {
      "summary": "Вычисляет количество дней между текущей датой и другой датой.",
      "example": "FROMNOW({Date}, \"день\") => 25"
    },
    "TONOW": {
      "summary": "Вычисляет количество дней между другой датой и текущей датой.",
      "example": "TONOW({Date}, \"день\") => 25"
    },
    "DATETIME_DIFF": {
      "summary": "Возвращает разницу между датами в указанных единицах. По умолчанию — в секундах.",
      "example": "DATETIME_DIFF(\"2022-08-01\", \"2023-09-08\", \"день\") => 403"
    },
    "WORKDAY": {
      "summary": "Возвращает рабочий день от указанной даты, исключая указанные праздники.",
      "example": "WORKDAY(\"2023-09-08\", 200) => \"2024-06-14 00:00:00\"\nWORKDAY(\"2023-09-08\", 200, \"2024-01-22, 2024-01-23, 2024-01-24, 2024-01-25\") => \"2024-06-20 00:00:00\""
    },
    "WORKDAY_DIFF": {
      "summary": "Возвращает количество рабочих дней между двумя датами. Рабочие дни исключают выходные и опциональный список праздников.",
      "example": "WORKDAY_DIFF(\"2023-06-18\", \"2023-10-01\") => 75\nWORKDAY(\"2023-06-18\", \"2023-10-01\", \"2023-07-12, 2023-08-18, 2023-08-19\") => 73"
    },
    "IS_SAME": {
      "summary": "Сравнивает две даты до указанной единицы и определяет, одинаковы ли они. Возвращает true, если да, false, если нет.",
      "example": "IS_SAME(\"2023-09-08\", \"2023-09-10\") => false\nIS_SAME(\"2023-09-08\", \"2023-09-10\", \"месяц\") => true"
    },
    "IS_AFTER": {
      "summary": "Определяет, является ли первая дата позднее второй. Возвращает true, если да, false, если нет.",
      "example": "IS_AFTER(\"2023-09-10\", \"2023-09-08\") => true\nIS_AFTER(\"2023-09-10\", \"2023-09-08\", \"месяц\") => false"
    },
    "IS_BEFORE": {
      "summary": "Определяет, является ли первая дата ранее второй. Возвращает true, если да, false, если нет.",
      "example": "IS_BEFORE(\"2023-09-08\", \"2023-09-10\") => true\nIS_BEFORE(\"2023-09-08\", \"2023-09-10\", \"месяц\") => false"
    },
    "DATE_ADD": {
      "summary": "Добавляет указанное количество единиц времени к дате.",
      "example": "DATE_ADD(\"2023-09-08 18:00:00\", 10, \"день\") => \"2023-09-18 18:00:00\""
    },
    "DATESTR": {
      "summary": "Форматирует дату в строку (YYYY-MM-DD).",
      "example": "DATESTR(\"2023/09/08\") => \"2023-09-08\""
    },
    "TIMESTR": {
      "summary": "Форматирует время в строку (HH:mm:ss).",
      "example": "TIMESTR(\"2023/09/08 16:50:30\") => \"16:50:30\""
    },
    "DATETIME_FORMAT": {
      "summary": "Форматирует дату и время в указанную строку.",
      "example": "DATETIME_FORMAT(\"2023-09-08\", \"DD-MM-YYYY\") => \"08-09-2023\""
    },
    "DATETIME_PARSE": {
      "summary": "Интерпретирует текстовую строку как дату с опциональными параметрами формата и локали.",
      "example": "DATETIME_PARSE(\"8 Сен 2023 18:00\", \"D MMM YYYY HH:mm\") => \"2023-09-08 18:00:00\""
    },
    "CREATED_TIME": {
      "summary": "Возвращает время создания текущей записи.",
      "example": "CREATED_TIME() => \"2023-09-08 18:00:00\""
    },
    "LAST_MODIFIED_TIME": {
      "summary": "Возвращает дату и время последнего изменения, сделанного пользователем в невычисляемом поле таблицы.",
      "example": "LAST_MODIFIED_TIME() => \"2023-09-08 18:00:00\""
    },
    "COUNTALL": {
      "summary": "Возвращает количество всех элементов, включая текст и пустые значения.",
      "example": "COUNTALL(100, 200, \"\", \"Teable\", TRUE()) => 5"
    },
    "COUNTA": {
      "summary": "Возвращает количество непустых значений.",
      "example": "COUNTA(100, 200, 300, \"\", \"Teable\", TRUE) => 4"
    },
    "COUNT": {
      "summary": "Возвращает количество числовых элементов.",
      "example": "COUNT(100, 200, 300, \"\", \"Teable\", TRUE) => 3"
    },
    "ARRAY_JOIN": {
      "summary": "Объединяет массив элементов в строку с указанным разделителем.",
      "example": "ARRAY_JOIN([\"Том\", \"Джерри\", \"Майк\"], \"; \") => \"Том; Джерри; Майк\""
    },
    "ARRAY_UNIQUE": {
      "summary": "Возвращает уникальные элементы массива.",
      "example": "ARRAY_UNIQUE([1, 2, 3, 2, 1]) => [1, 2, 3]"
    },
    "ARRAY_FLATTEN": {
      "summary": "Разворачивает массив, удаляя любые вложенные массивы.",
      "example": "ARRAY_FLATTEN([1, 2, \" \", 3, true], [\"ABC\"]) => [1, 2, 3, \" \", true, \"ABC\"]"
    },
    "ARRAY_COMPACT": {
      "summary": "Удаляет пустые строки и null-значения из массива.",
      "example": "ARRAY_COMPACT([1, 2, 3, \"\", null, \"ABC\"]) => [1, 2, 3, \"ABC\"]"
    },
    "TEXT_ALL": {
      "summary": "Возвращает все текстовые значения.",
      "example": "TEXT_ALL(\"t\") => t"
    },
    "RECORD_ID": {
      "summary": "Возвращает ID текущей записи.",
      "example": "RECORD_ID() => \"recxxxxxx\""
    },
    "AUTO_NUMBER": {
      "summary": "Возвращает уникальные и увеличенные числа для каждой записи.",
      "example": "AUTO_NUMBER() => 1"
    },
    "FORMULA": {
      "summary": "Заполняет переменные, операционные символы и функции для создания формул для вычислений.",
      "example": "Цитирование столбца: {Название поля}\n\nИспользование оператора: 100 * 2 + 300\n\nИспользование функции: SUM({Числовое поле 1}, 100)\n\nИспользование оператора IF: \nIF(логическое условие, \"значение 1\", \"значение 2\")"
    }
  },
  "functionType": {
    "fields": "Поля",
    "numeric": "Числовые",
    "text": "Текстовые",
    "logical": "Логические",
    "date": "Дата",
    "array": "Массивы",
    "system": "Системные"
  },
  "statisticFunc": {
    "none": "Нет",
    "empty": "Пусто",
    "filled": "Заполнено",
    "unique": "Уникальные",
    "max": "Максимум",
    "min": "Минимум",
    "sum": "Сумма",
    "average": "Среднее",
    "checked": "Отмеченные",
    "unChecked": "Неотмеченные",
    "percentEmpty": "Процент пустых",
    "percentFilled": "Процент заполненных",
    "percentUnique": "Процент уникальных",
    "percentChecked": "Процент отмеченных",
    "percentUnChecked": "Процент неотмеченных",
    "earliestDate": "Самая ранняя дата",
    "latestDate": "Самая поздняя дата",
    "dateRangeOfDays": "Диапазон дат (дни)",
    "dateRangeOfMonths": "Диапазон дат (месяцы)",
    "totalAttachmentSize": "Общий размер вложений"
  },
  "baseQuery": {
    "add": "Добавить",
    "error": {
      "invalidCol": "Неверный столбец, выберите снова",
      "invalidCols": "Неверные столбцы: {{colNames}}",
      "invalidTable": "Неверная таблица, выберите снова",
      "requiredSelect": "Необходимо выбрать один"
    },
    "from": {
      "title": "Откуда",
      "fromTable": "Выберите таблицу",
      "fromQuery": "Из запроса"
    },
    "select": {
      "title": "Выбрать"
    },
    "where": {
      "title": "Где"
    },
    "groupBy": {
      "title": "Группировать по"
    },
    "orderBy": {
      "title": "Сортировать по",
      "asc": "По возрастанию",
      "desc": "По убыванию"
    },
    "limit": {
      "title": "Ограничение"
    },
    "offset": {
      "title": "Смещение"
    },
    "join": {
      "title": "Объединение",
      "joinType": "Тип объединения",
      "leftJoin": "Левое объединение",
      "rightJoin": "Правое объединение",
      "innerJoin": "Внутреннее объединение",
      "fullJoin": "Полное объединение",
      "data": "Откуда"
    },
    "aggregation": {
      "title": "Агрегация"
    }
  }
}